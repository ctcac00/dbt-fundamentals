version: 2

models:
  - name: dim_customers
    description: customers dimension model
    columns: 
      - name: customer_id
        description: The primary key for customers.
        tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              arguments:
                field: customer_id
                to: ref('stg_jaffle_shop__customers')

      - name: first_order_date
        description: NULL when a customer has not yet placed an order.

      - name: lifetime_value
        description: Lifetime value of a customer based on orders purchased
        tests: 
          - average_dollars_spent_greater_than_one:
              arguments:
                group_by_column: customer_id

  - name: fct_orders
    description: orders fact model
    tests:
      - dbt_utils.expression_is_true:
          arguments:
            expression : "amount >= 0"
    columns:
        - name: order_id
          description: Primary key for orders
          tests:
            - unique
            - not_null
        - name: amount
          description: Dollars spent per order
          tests: 
            - average_dollars_spent_greater_than_one:
                arguments:
                  group_by_column: customer_id
            - dbt_expectations.expect_column_values_to_be_between: 
            # this will perform what the dbt_utils.expression-is-true test does!
                arguments:
                  min_value: 0
                  row_condition: "order_id is not null" 
                  strictly: false
            - dbt_expectations.expect_column_mean_to_be_between: 
            # this will perform what our singular and generic tests do!
                arguments:
                  min_value: 1
                  group_by: [customer_id] 
                  row_condition: "order_id is not null" # (Optional)
                  strictly: false

        - name: customer_id
          tests:
            - relationships:
                arguments:
                  to: ref('stg_jaffle_shop__customers')
                  field: customer_id
            # this test should fail, use `dbt test -s orders --store-failures` to find results
            - unique