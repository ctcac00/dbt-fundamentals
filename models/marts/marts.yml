version: 2

models:
  - name: dim_customers
    description: "customers dimension modelcustomers dimension modelsemantic model for dim_customers\n"
    columns:
      - name: customer_id
        description: The primary key for customers.
        tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              arguments:
                field: customer_id
                to: ref('stg_jaffle_shop__customers')

        entity:
          type: primary
          name: customer
      - name: first_order_date
        description: NULL when a customer has not yet placed an order.

        dimension:
          type: time
        granularity: day
      - name: lifetime_value
        description: Lifetime value of a customer based on orders purchased
        tests:
          - average_dollars_spent_greater_than_one:
              arguments:
                group_by_column: customer_id

      - name: first_name
        dimension:
          type: categorical
          name: customer_name
      - name: most_recent_order_date
        dimension:
          type: time
        granularity: day
    semantic_model:
      enabled: true
      name: dim_customers
    agg_time_dimension: most_recent_order_date
    metrics:
      - name: "customers_with_orders"
        label: "customers_with_orders"
        description: "Unique count of customers placing orders"
        type: simple
        agg: count_distinct
        expr: customer_id
      - name: count_lifetime_orders
        description: Total count of orders per customer.
        agg: sum
        expr: number_of_orders
        type: simple
      - name: lifetime_spend
        agg: sum
        expr: lifetime_value
        description: Gross customer lifetime spend inclusive of taxes.
        type: simple
  - name: fct_orders
    description: "orders fact modelorders fact modelOrder fact table. This tableâ€™s grain is one row per order\n"
    tests:
      - dbt_utils.expression_is_true:
          arguments:
            expression: "amount >= 0"
    columns:
      - name: order_id
        description: Primary key for orders
        tests:
          - unique
          - not_null
        entity:
          type: primary
      - name: amount
        description: Dollars spent per order
        tests:
          - average_dollars_spent_greater_than_one:
              arguments:
                group_by_column: customer_id
          - dbt_expectations.expect_column_values_to_be_between:
              # this will perform what the dbt_utils.expression-is-true test does!
              arguments:
                min_value: 0
                row_condition: "order_id is not null"
                strictly: false
          - dbt_expectations.expect_column_mean_to_be_between:
              # this will perform what our singular and generic tests do!
              arguments:
                min_value: 1
                group_by: [customer_id]
                row_condition: "order_id is not null" # (Optional)
                strictly: false

      - name: customer_id
        tests:
          - relationships:
              arguments:
                to: ref('stg_jaffle_shop__customers')
                field: customer_id
          # this test should fail, use `dbt test -s orders --store-failures` to find results
          # - unique
        entity:
          type: foreign
          name: customer
      - name: order_date
        dimension:
          type: time
        granularity: day
    semantic_model:
      enabled: true
      name: fct_orders
    agg_time_dimension: order_date
    metrics:
      - name: "order_total"
        description: "Sum of orders value"
        type: simple
        label: "order_total"
        agg: sum
        expr: amount
      - name: "order_count"
        description: "number of orders"
        type: simple
        label: "order_count"
        agg: sum
        expr: 1
      - name: large_orders
        description: "Count of orders with order total over 20."
        type: simple
        label: "Large Orders"
        filter: |
          {{ Metric('order_total', group_by=['order_id']) }} >=  20
  # Ratio type metric
        agg: sum
        expr: 1
      - name: order_value_p99
        expr: amount
        agg: percentile
        type: simple
        percentile: 0.99
      - name: "avg_order_value"
        label: "avg_order_value"
        description: "average value of each order"
        type: ratio
        numerator:
          name: order_total
        denominator:
          name: order_count
  # Cumulative type metrics
      - name: order_total_1
        description: The total amount for each order including taxes.
        agg: sum
        expr: amount
        type: simple
      - name: "cumulative_order_amount_mtd"
        label: "cumulative_order_amount_mtd"
        description: "The month to date value of all orders"
        type: cumulative
        input_metric:
          name: order_total_1
      - name: "pct_of_orders_that_are_large"
        label: "pct_of_orders_that_are_large"
        description: "percent of orders that are large"
        type: derived
        expr: large_orders/order_count
        input_metrics:
          - name: large_orders
          - name: order_count